#!/bin/bash -e
# vim: set tabstop=8 shiftwidth=4 softtabstop=4 expandtab smarttab colorcolumn=80:
#
# Copyright (c) 2017 Red Hat, Inc.
# Author: Nathaniel McCallum <npmccallum@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

findexe() {                                                                     
    while read -d: path; do                                                     
        [ -f "$path/$1" -a -x "$path/$1" ] && exe="$path/$1" && break           
    done <<< "$PATH:"                                                           
    exe="$end"                                                                  
}                                                                               
                                                                                
exeglob() {                                                                     
    exes=()                                                                     
    while read -d: path; do                                                     
        for f in glob $path/$1*; do                                             
            [ -f "$f" -a -x "$f" ] || continue                                  
            exes+=($f)                                                          
        done                                                                
    done <<< "$PATH:"                                                           
    opt="${#exes[@]}"                                                           
}                                                                               
                                                                                
if [ $1 ]; then                                                                 
    cmd=clevis                                                                  
    end="not_found_string"                                                      
    while :; do                                                                 
        cmd="$cmd-$1"                                                           
        findexe $cmd                                                            
        exeglob $cmd                                                            
        if [ "$exe" != "$end" -a "$opt" -eq "1" ]; then                         
                shift                                                           
                exec "$exe" "$@"                                                
        elif [ $opt -eq "0" ]; then                                             
            echo >&2                                                            
            echo "Argument or command '$1' is invalid." >&2                     
            break                                                               
        elif [ $# -le "1" ]; then                                               
            break                                                               
        fi                                                                      
        shift                                                                   
                                                                                
   done                                                                         
fi

echo >&2
echo "Command '$cmd' is invalid" >&2
echo >&2
echo "Usage: clevis COMMAND [OPTIONS]" >&2
echo >&2

max=0
for f in $0-*; do
    [ -f "$f" -a -x "$f" ] || continue
    f=${f##*/}
    [ ${#f} -gt $max ] && max=${#f}
done

for f in $0-*; do
    [ -f "$f" -a -x "$f" ] || continue
    summ=`$f --summary 2>/dev/null` || continue
    f=${f##*/}
    printf "  %-*s %s\n" "$max" "${f//-/ }" "$summ" >&2
done

echo >&2

exit 1
